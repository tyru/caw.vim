*caw.txt* *caw*

Author:
  tyru <tyru.exe@gmail.com>
Version: 1.x.x
License: Under the same license as Vim itself (see :help license)

==============================================================================
CONTENTS								*caw-contents*

Introduction			|caw-introduction|
Supported filetypes		|caw-supported-filetypes|
Interface				|caw-interface|
  Keymappings			|caw-keymappings|
  Variables				|caw-variables|
Changelog				|caw-changelog|


==============================================================================
INTRODUCTION							*caw-introduction* {{{

gcI
  before:
      "   testtesttest"
  after:
      "#    testtesttest"

gci
  before:
      "   <- inserted here"
  after:
      "   # <- inserted here"

gca
  before:
      "aaaaaaa"
  after:
      "aaaaaaa    # "

gcw
  before:
      "aaaaaaa"
  after:
      "/* aaaaaaa */"

gcv
  before:
      "   some code here"
  after:
      Type "gcvi", and '// XXX:<CR>'
      "   // XXX: some code here"

gco
  before:
      "   func1();"
  after:
      Type "gco", and "func2();"
      "   func1()"
      "   // func2();"

gcO
  before:
      "   func1();"
  after:
      you type 'gcO', and 'call func1()'
      "   // call func1()"
      "   func1();"

}}}
==============================================================================
SUPPORTED FILETYPES						*caw-supported-filetypes* {{{

Same as NERD Commenter (http://www.vim.org/scripts/script.php?script_id=1218).
Because almost comment strings are from NERD Commenter's code.
(I think it would be nice to be able to separate
comment strings into indivisual data.
Other comment plugins also use it.)

abaqus abc acedb ada ahdl amiga aml ampl ant apache apachestyle asm68k asm asn
aspvbs atlas autohotkey autoit automake ave awk basic b bc bdf bib bindzone
bst btm caos catalog c cfg cg ch changelog cl clean clipper cmake conf config
context cpp crontab cs csc csp css cterm cupl csv cvs dcl debchangelog
debcontrol debsources def diff django docbk dns dosbatch dosini dot dracula
dsl dtd dtml dylan ecd eiffel elf elmfilt erlang eruby eterm expect exports
fetchmail fgl focexec form fortran foxpro fstab fvwm fx gdb gdmo geek
gentoo-package-keywords' gentoo-package-mask' gentoo-package-use' gnuplot
gtkrc haskell hb h help hercules hog html htmldjango htmlos ia64 icon idlang
idl indent inform inittab ishd iss ist jam java javascript jess jgraph
jproperties jproperties jsp kconfig kix kscript lace lex lftp lifelines lilo
lisp lite lotos lout lprolog lscript lss lua lynx m4 mail make maple masm
master matlab mel mf mib mma model moduala.  modula2 modula3 monk mush muttrc
named nasm nastran natural ncf netdict netrw nqc nroff nsis objc ocaml occam
omlet omnimark openroad opl ora otl ox pascal passwd pcap pccts perl pfmain
php phtml pic pike pilrc pine plaintex plm plsql po postscr pov povini ppd
ppwiz procmail progress prolog psf ptcap python python qf radiance ratpoison r
rc readline rebol registry remind rexx robots rpl rtf ruby sa samba sas sass
sather scheme scilab screen scsh sdl sed selectbuf sgml sgmldecl sgmllnx sh
sicad simula sinda skill slang sl slrnrc sm smarty smil smith sml snnsnet
snnspat snnsres snobol4 spec specman spice sql sqlforms sqlj sqr squid st stp
strace svn systemverilog tads taglist tags tak tasm tcl terminfo tex text
plaintex texinfo texmf tf tidy tli trasys tsalt tsscl tssgm uc uil vb verilog
verilog_systemverilog vgrindefs vhdl vim viminfo virata vo_base vrml vsejcl
webmacro wget winbatch wml wvdial xdefaults xf86conf xhtml xkb xmath xml
xmodmap xpm2 xpm xslt yacc yaml z8a

}}}
==============================================================================
INTERFACE								*caw-interface* {{{
------------------------------------------------------------------------------
KEYMAPPINGS								*caw-keymappings* {{{


(nv) <Plug>(caw:i:comment)				*<Plug>(caw:i:comment)*
(nv) <Plug>(caw:a:comment)				*<Plug>(caw:a:comment)*
(nv) <Plug>(caw:i:toggle)				*<Plug>(caw:i:toggle)*
(nv) <Plug>(caw:a:toggle)				*<Plug>(caw:a:toggle)*

Default mapping		rhs ~
gci					<Plug>(caw:i:comment)
gca					<Plug>(caw:a:comment)


(nv) <Plug>(caw:wrap:comment)			*<Plug>(caw:wrap:comment)*
(nv) <Plug>(caw:wrap:toggle)			*<Plug>(caw:wrap:toggle)*

Default mapping		rhs ~
gcw					<Plug>(caw:wrap:comment)


(n) <Plug>(caw:jump:comment-next)		*<Plug>(caw:jump:comment-next)*
(n) <Plug>(caw:jump:comment-prev)		*<Plug>(caw:jump:comment-prev)*

Default mapping		rhs ~
gco					<Plug>(caw:jump:comment-next)
gcO					<Plug>(caw:jump:comment-prev)


(nv) <Plug>(caw:input:comment)			*<Plug>(caw:input:comment)*

Default mapping		rhs ~
gcv					<Plug>(caw:input:comment)


(nv) <Plug>(caw:uncomment)				*<Plug>(caw:uncomment)*

Default mapping		rhs ~
gcuu				<Plug>(caw:uncomment)


(nv) <Plug>(caw:i:uncomment)			*<Plug>(caw:i:uncomment)*
(nv) <Plug>(caw:a:uncomment)			*<Plug>(caw:a:uncomment)*

Default mapping		rhs ~
gcui				<Plug>(caw:i:uncomment)
gcua				<Plug>(caw:a:uncomment)


(nv) <Plug>(caw:wrap:uncomment)			*<Plug>(caw:wrap:uncomment)*

Default mapping		rhs ~
gcuw				<Plug>(caw:wrap:uncomment)


(nv) <Plug>(caw:input:uncomment)		*<Plug>(caw:input:uncomment)*

Default mapping		rhs ~
gcuv				<Plug>(caw:input:uncomment)


}}}
------------------------------------------------------------------------------
VARIABLES								*caw-variables* {{{

caw_oneline_comment						*caw_oneline_comment*
	Used by oneline comment mappings.
	- b:caw_oneline_comment
	- w:caw_oneline_comment
	- t:caw_oneline_comment
	- g:caw_oneline_comment
	If exists, the top variable is used.
	Define this in .vim/ftplugin/*.vim or .vim/after/ftplugin/*.vim . >
	let b:caw_oneline_comment = ';'

caw_wrap_oneline_comment				*caw_wrap_oneline_comment*
	Same as |caw_wrap_oneline_comment|.
	Used by wrap oneline comment mappings.

caw_wrap_multiline_comment				*caw_wrap_multiline_comment*
	Same as |caw_wrap_oneline_comment|.
	Used by wrap multiline comment mappings.

g:caw_no_default_keymappings			*g:caw_no_default_keymappings*
									(Default: 0)
	If this variable is true,
	caw does not map default keymappings.
	See |caw-keymappings| for default keymappings.

g:caw_sp_i								*g:caw_sp_i*
									(Default: " ")
	Inserted string after comment with <Plug>(caw:i:comment).

g:caw_i_startinsert_at_blank_line		*g:caw_i_startinsert_at_blank_line*
									(Default: 1)
	If this variable is true,
	if current line is blank line,
	enter |Insert-mode| after <Plug>(caw:i:comment).

g:caw_i_align							*g:caw_i_align*
									(Default: 1)
	If this variable is true,
	Align all <Plug>(caw:i:comment) comments' cols.

	TODO: example

g:caw_I_startinsert_at_blank_line		*g:caw_I_startinsert_at_blank_line*
									(Default: 1)
	If this variable is true,
	if current line is blank line,
	enter |Insert-mode| after <Plug>(caw:I:comment).

g:caw_sp_I								*g:caw_sp_I*
									(Default: " ")
	Inserted string after comment with <Plug>(caw:I:comment).

g:caw_sp_a_left							*g:caw_sp_a_left*
									(Default: "    ")
	Inserted string before comment with <Plug>(caw:a:comment).

g:caw_sp_a_right						*g:caw_sp_a_right*
									(Default: " ")
	Inserted string after comment with <Plug>(caw:a:comment).

g:caw_a_startinsert						*g:caw_a_startinsert*
									(Default: 1)
	If this variable is true,
	enter |Insert-mode| after <Plug>(caw:a:comment).

g:caw_sp_wrap_left						*g:caw_sp_wrap_left*
									(Default: " ")
	Inserted string before comment with <Plug>(caw:wrap:comment).

g:caw_sp_wrap_right						*g:caw_sp_wrap_right*
									(Default: " ")
	Inserted string after comment with <Plug>(caw:wrap:comment).

g:caw_sp_jump							*g:caw_sp_jump*
									(Default: " ")
	Inserted string after comment with <Plug>(caw:jump:comment-next)
	and <Plug>(caw:jump:comment-prev).

g:caw_default_oneline_comment			*g:caw_default_oneline_comment*
									(Default: "#")
	Comment string which is used when caw failed to detect
	current buffer's comment string.

	TODO: Keymappings which may use this comment string.

g:caw_default_wrap_oneline_comment		*g:caw_default_wrap_oneline_comment*
									(Default: [])
	Comment string which is used when caw failed to detect
	current buffer's comment string.

	TODO: Keymappings which may use this comment string.

g:caw_default_wrap_multiline_comment	*g:caw_default_wrap_multiline_comment*
									(Default: {})
	Comment string which is used when caw failed to detect
	current buffer's comment string.

	TODO: Keymappings which may use this comment string.

}}}
}}}
==============================================================================
CHANGELOG								*caw-changelog* {{{

1.0.0:
- Initial upload.
1.0.1:
- Fix bug that CommentAnyWay.Base.GetIndent() can't get proper indent

}}}
==============================================================================
vim:tw=78:fo=tcq2mM:ts=4:ft=help:norl:noet:fdm=marker:fen
